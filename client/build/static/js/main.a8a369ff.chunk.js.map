{"version":3,"sources":["Components/Allpets.jsx","Components/Addpet.jsx","Components/viewpet.jsx","Components/Editpet.jsx","App.js","serviceWorker.js","index.js"],"names":["Allpets","props","useState","pet","setpet","useEffect","axios","get","then","res","console","log","data","catch","err","className","map","onepet","key","_id","name","type","description","to","Newpet","setname","settype","setdescription","skillone","setskillone","skilltwo","setskilltwo","skillthree","setskillthree","errors","seterrors","onSubmit","e","preventDefault","newpet","post","navigate","onChange","target","value","title","message","price","Petinfo","likes","setlikes","onClick","delete","id","data-toggle","Editpet","fixedpet","put","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a8a369ff.chunk.js","sourcesContent":["// this component will hold the form that we use to view all the pets\r\nimport React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport { navigate, Link } from \"@reach/router\";\r\n\r\nconst Allpets =(props) => {\r\n    const [pet, setpet] = useState([]);\r\n\r\n    const pullpet = () => {\r\n        axios.get(\"http://localhost:8000/api/pets\")\r\n         .then(res => {\r\n           console.log(res);\r\n           setpet(res.data)\r\n         })\r\n         .catch(err => console.log(err))\r\n      }\r\n\r\n\r\n    useEffect(() => {\r\n        pullpet();\r\n       }, []);\r\n\r\n    return (\r\n        <table className=\"table bg-light  text-dark\">\r\n        <thead>\r\n        <tr> \r\n          <th> Title </th>\r\n          <th> Type </th>\r\n          <th> description </th>\r\n          <th> actions</th>\r\n        </tr>\r\n        </thead>\r\n         \r\n        <tbody>\r\n          {pet.map(onepet =>\r\n          <tr key={onepet._id}>\r\n            <td> {onepet.name} </td>\r\n            <td> {onepet.type} </td>\r\n            <td> {onepet.description}</td>\r\n            <td>\r\n                <button className=\"btn btn-info \"><Link className=\"text-light\" to={\"/view/\" +onepet._id}> View Pet  </Link> </button>\r\n                <button className=\"btn btn-success\"><Link className=\"text-light\" to={\"/edit/\" +onepet._id}> Edit Pet   </Link> </button>\r\n               \r\n               </td>\r\n          </tr>\r\n          )}\r\n        </tbody>\r\n        \r\n      </table>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Allpets;","import React, {useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport { navigate } from \"@reach/router\";\r\n\r\nconst Newpet = (props) =>{\r\n    \r\n    const[name, setname] = useState(\"\");\r\n    const[type, settype] = useState(\"\");\r\n    const[description, setdescription] = useState(\"\");\r\n    const[skillone, setskillone] =useState(\"\")\r\n    const[skilltwo, setskilltwo] =useState(\"\")\r\n    const[skillthree, setskillthree] =useState(\"\")\r\n    const[errors, seterrors] = useState({});\r\n\r\n    const addpet = (e) => {\r\n        //  here we acces the database and pass in the new product below. this will consist of the information being passed through the form created. \r\n         e.preventDefault();\r\n         const newpet = {name, type, description, skillone, skilltwo, skillthree}\r\n         axios.post(\"http://localhost:8000/api/pets\", newpet)\r\n          .then(res => {\r\n            console.log(res.data);\r\n            if(res.data.errors){\r\n              seterrors(res.data.errors);\r\n            }\r\n            else{\r\n              navigate('/');\r\n            }\r\n            // pullproduct();   -- no longer able to pull this here unless I build it\r\n            // calling pull product above here allows the page to update with the updated list of products without having to refresh the fucking page. if we kept it in the app.js  \r\n           \r\n      \r\n          })\r\n          .catch(err => console.log(err))\r\n      \r\n       }\r\n\r\n\r\n    return(\r\n        \r\n        \r\n        <form onSubmit={addpet}>\r\n            <p> Pet Name: <input type=\"text\" onChange={ e => setname(e.target.value)} /> </p>\r\n            {\r\n              errors.title ? \r\n              <p className=\"text-danger\"> {errors.title.message}</p>:\r\n              \"\"\r\n            }\r\n            <p> Type: <input type=\"text\" onChange={ e => settype(e.target.value)}/> </p>\r\n            {\r\n              errors.price ? \r\n              <p> {errors.price.message}</p>:\r\n              \"\"\r\n            }\r\n            <p> description: <input type=\"text\" onChange={ e => setdescription(e.target.value)}/> </p>\r\n            {\r\n              errors.description ? \r\n              <p className=\"text-danger\"> {errors.description.message}</p>:\r\n              \"\"\r\n            }\r\n            <p> skill one: <input type=\"text\" onChange={ e => setskillone(e.target.value)}/> </p>\r\n            <p> skill two: <input type=\"text\" onChange={ e => setskilltwo(e.target.value)}/> </p>\r\n            <p> skill three: <input type=\"text\" onChange={ e => setskillthree(e.target.value)}/> </p>\r\n\r\n            <button className =\"btn btn-primary\" type=\"Submit\"> Submit</button> \r\n            \r\n          </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Newpet;","import React ,{useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport { navigate } from \"@reach/router\";\r\n\r\nconst Petinfo = (props) => {\r\n    const[name, setname] = useState(\"\");\r\n    const[type, settype] = useState(\"\");\r\n    const[description, setdescription] = useState(\"\");\r\n    const[skillone, setskillone] =useState(\"\")\r\n    const[skilltwo, setskilltwo] =useState(\"\")\r\n    const[skillthree, setskillthree] =useState(\"\")\r\n    const[errors, seterrors] = useState({});\r\n    const[likes, setlikes] = useState(0);\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pets/${props._id}`)\r\n        .then(res => {\r\n          console.log(res);\r\n          setname(res.data.name)\r\n          settype(res.data.type)\r\n          setdescription(res.data.description)\r\n          setskillone(res.data.skillone)\r\n          setskilltwo(res.data.skilltwo)\r\n          setskillthree(res.data.skillthree)\r\n          console.log(props);\r\n        })\r\n        .catch(err => console.log(err));\r\n   }, []);\r\n\r\n   const likepet = (e) => {\r\n       const likedpet =1;\r\n       setlikes(likedpet)\r\n       \r\n   }\r\n\r\n   const adoptpet = (e) => {\r\n       e.preventDefault();\r\n       axios.delete(`http://localhost:8000/api/pets/${props._id}`)\r\n       .then(res => {\r\n           console.log(res);\r\n           navigate(\"/\")\r\n\r\n           \r\n       })\r\n       .catch(err => console.log(err));\r\n   }\r\n\r\n   \r\n      \r\n    return (\r\n        <div>\r\n            <p> Name: {name} </p>\r\n            <p> Type:  {type} </p>\r\n            <p>Description :{description} </p>\r\n            <p> Likes :{likes}</p>\r\n            <ul>\r\n                <li> {skillone} </li>\r\n                <li> {skilltwo} </li>\r\n                <li> {skillthree} </li>\r\n            </ul>\r\n\r\n            <button className=\"btn btn-warning\" onClick={adoptpet}> Adopt {name} </button>\r\n            <button id=\"mybutton\" className=\"btn btn-primary\" onClick={likepet} data-toggle=\"collapse\"  value=\"like\"> Like pet</button>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Petinfo;","import React, {useState, useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport { navigate } from \"@reach/router\";\r\n\r\nconst Editpet = (props) =>{\r\n    \r\n    const[name, setname] = useState(\"\");\r\n    const[type, settype] = useState(\"\");\r\n    const[description, setdescription] = useState(\"\");\r\n    const[skillone, setskillone] =useState(\"\")\r\n    const[skilltwo, setskilltwo] =useState(\"\")\r\n    const[skillthree, setskillthree] =useState(\"\")\r\n    const[errors, seterrors] = useState({});\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(`http://localhost:8000/api/pets/${props._id}`)\r\n        .then(res => {\r\n          console.log(res);\r\n          setname(res.data.name)\r\n          settype(res.data.type)\r\n          setdescription(res.data.description)\r\n          setskillone(res.data.skillone)\r\n          setskilltwo(res.data.skilltwo)\r\n          setskillthree(res.data.skillthree)\r\n          console.log(props);\r\n        })\r\n        .catch(err => console.log(err));\r\n   }, []);\r\n\r\n    const updatepet = (e) => {\r\n         e.preventDefault();\r\n         const fixedpet = {name, type, description, skillone, skilltwo, skillthree};\r\n         axios.put(`http://localhost:8000/api/pets/${props._id}`, fixedpet )\r\n          .then(res => {\r\n            console.log(res.data);\r\n            if(res.data.errors){\r\n              seterrors(res.data.errors);\r\n            }\r\n            else{\r\n              navigate('/');\r\n            }\r\n\r\n      \r\n          })\r\n          .catch(err => console.log(err))\r\n      \r\n       }\r\n\r\n\r\n    return(\r\n        \r\n        \r\n        <form onSubmit={updatepet}>\r\n            <p> Pet Name: <input type=\"text\" onChange={ e => setname(e.target.value)} value={name}/> </p>\r\n            {\r\n              errors.name ? \r\n              <p className=\"text-danger\"> {errors.name.message}</p>:\r\n              \"\"\r\n            }\r\n            <p> Type: <input type=\"text\" onChange={ e => settype(e.target.value)} value={type}/> </p>\r\n            {\r\n              errors.type? \r\n              <p className=\"text-danger\"> {errors.type.message}</p>:\r\n              \"\"\r\n            }\r\n            <p> description: <input type=\"text\" onChange={ e => setdescription(e.target.value)} value={description}/> </p>\r\n            {\r\n              errors.description ? \r\n              <p className=\"text-danger\"> {errors.description.message}</p>:\r\n              \"\"\r\n            }\r\n            <p> skill one: <input type=\"text\" onChange={ e => setskillone(e.target.value)}  value={skillone}/> </p>\r\n            <p> skill two: <input type=\"text\" onChange={ e => setskilltwo(e.target.value)} value={skilltwo}/></p>\r\n            <p> skill three: <input type=\"text\" onChange={ e => setskillthree(e.target.value)} value={skillthree}/> </p>\r\n\r\n            <button className =\"btn btn-primary\" type=\"Submit\"> Submit</button> \r\n            \r\n          </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Editpet;","import React, {useState, useEffect} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Router, Link} from \"@reach/router\";\nimport axios from \"axios\";\nimport Allpets from './Components/Allpets'\nimport Newpet from './Components/Addpet'\nimport Petinfo from './Components/viewpet';\nimport Editpet from './Components/Editpet'\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1> Welcome to (not evil) \"Animal Farm\"</h1>\n      <Link to=\"/new\"> <button className=\"btn btn-success\"> Add Pet </button>  </Link>\n      <Link to=\"/\"> <button className=\"btn btn-primary\"> Home yo </button>  </Link>\n\n      <Router>\n        <Allpets path =\"/\"> </Allpets>\n        <Newpet path =\"/new\"></Newpet> \n        <Petinfo path =\"/view/:_id\"> </Petinfo>\n        <Editpet path =\"edit/:_id\"> </Editpet>\n\n\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}